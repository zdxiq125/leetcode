/*********
Small cases: Pass
Large cases: Time limit exceeds

深度优先搜索，时间复杂度与图的分支系数b有关
这个分支系数吧，按我的理解应该是平均一个节点的邻接节点的个数，
显然，完全图的分支系数应该是最大的；而一个二叉树的系数应该是最小的。
深度优先搜索的复杂度是：O(b^m)，其中m是搜索的最大深度。
以二叉树为例，时间复杂度O(2^log(n)) = O(n)，这正是二叉树遍历的时间复杂度。
可以想见，当分支系数很大时，算法性能是不可接受的。
*/
class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        int min = INT_MAX;
        unordered_set<string> visited;
        visited.insert(start);
        helper(start,end,dict,visited,1,min);
        
        if(min == INT_MAX)
            return 0;
        else
            return min;
    }
private:
    void helper(string start, string end, 
            unordered_set<string> &dict, 
            unordered_set<string> &visited, 
            int length, int &min) {
        if(start == end) {
            min = min < length ? min : length;
            return;
        }
        
        for(int i = 0; i < start.size(); i++) {
            char tmp = start[i];
            for(int j = 0; j < 26; j++) {
                start[i] = 'a' + j;
                if(dict.find(start) != dict.end() 
                        && visited.find(start) == visited.end()) {
                    visited.insert(start);
                    helper(start,end,dict,visited,length+1,min);
                    visited.erase(visited.find(start));
                }
            }
            start[i] = tmp;
        }
    }
};

/*********
Accepted！

广度优先搜索，时间复杂度与图的节点数、边数成正比O(|v|+|e|)
*/
class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
		if(dict.empty())
			return 0;
		if(start == end)
			return 1;
			
		queue<string> q;
		unordered_set<string> visited;
		q.push(start);
		visited.insert(start);
		//count代表当前阶段BFS找到的节点数
		int count = 1, length = 1;
		while(!q.empty()) {
			int max = count, i = 0;
			count = 0;
			while(i < max) {
				string des_str = q.front();
				q.pop();
				//改变des_str的每一位
				for(int p = 0; p < des_str.size(); p++) {
					char cur = des_str[p];
					for(char ch = 'a'; ch <= 'z'; ch++) {
						des_str[p] = ch;
						//如果找到end
						if(des_str == end)
							return length + 1;
						//在字典中找到且没有访问过
						if(dict.find(des_str) != dict.end() && visited.find(des_str) == visited.end()) {
							q.push(des_str);
							visited.insert(des_str);
							count++;
						}
					}
					des_str[p] = cur;
				}
				i++;
			}
			length++;
		}
		return 0;
	}
};